const RANDOMIZATION_TABLE: [u8; 255] = [
    0xFF, 0x39, 0x9E, 0x5A, 0x68, 0xE9, 0x06, 0xF5, 0x6C, 0x89, 0x2F, 0xA1, 0x31, 0x5E, 0x08, 0xC0,
    0x52, 0xA8, 0xBB, 0xAE, 0x4E, 0xC2, 0xC7, 0xED, 0x66, 0xDC, 0x38, 0xD4, 0xF8, 0x86, 0x50, 0x3D,
    0xFE, 0x73, 0x3C, 0xB4, 0xD1, 0xD2, 0x0D, 0xEA, 0xD9, 0x12, 0x5F, 0x42, 0x62, 0xBC, 0x11, 0x80,
    0xA5, 0x51, 0x77, 0x5C, 0x9D, 0x85, 0x8F, 0xDA, 0xCD, 0xB8, 0x71, 0xA9, 0xF1, 0x0C, 0xA0, 0x7B,
    0xFC, 0xE6, 0x79, 0x69, 0xA3, 0xA4, 0x1B, 0xD5, 0xB2, 0x24, 0xBE, 0x84, 0xC5, 0x78, 0x23, 0x01,
    0x4A, 0xA2, 0xEE, 0xB9, 0x3B, 0x0B, 0x1F, 0xB5, 0x9B, 0x70, 0xE3, 0x53, 0xE2, 0x19, 0x40, 0xF7,
    0xF9, 0xCC, 0xF2, 0xD3, 0x47, 0x48, 0x37, 0xAB, 0x64, 0x49, 0x7D, 0x09, 0x8A, 0xF0, 0x46, 0x02,
    0x95, 0x45, 0xDD, 0x72, 0x76, 0x16, 0x3F, 0x6B, 0x36, 0xE1, 0xC6, 0xA7, 0xC4, 0x32, 0x81, 0xEF,
    0xF3, 0x99, 0xE5, 0xA6, 0x8E, 0x90, 0x6F, 0x56, 0xC8, 0x92, 0xFA, 0x13, 0x15, 0xE0, 0x8C, 0x05,
    0x2A, 0x8B, 0xBA, 0xE4, 0xEC, 0x2C, 0x7E, 0xD6, 0x6D, 0xC3, 0x8D, 0x4F, 0x88, 0x65, 0x03, 0xDF,
    0xE7, 0x33, 0xCB, 0x4D, 0x1D, 0x20, 0xDE, 0xAD, 0x91, 0x25, 0xF4, 0x26, 0x2B, 0xC1, 0x18, 0x0A,
    0x55, 0x17, 0x75, 0xC9, 0xD8, 0x58, 0xFD, 0xAC, 0xDB, 0x87, 0x1A, 0x9F, 0x10, 0xCA, 0x07, 0xBF,
    0xCE, 0x67, 0x96, 0x9A, 0x3A, 0x41, 0xBD, 0x5B, 0x22, 0x4B, 0xE8, 0x4C, 0x57, 0x82, 0x30, 0x14,
    0xAA, 0x2E, 0xEB, 0x93, 0xB0, 0xB1, 0xFB, 0x59, 0xB7, 0x0E, 0x35, 0x3E, 0x21, 0x94, 0x0F, 0x7F,
    0x9C, 0xCF, 0x2D, 0x34, 0x74, 0x83, 0x7A, 0xB6, 0x44, 0x97, 0xD0, 0x98, 0xAF, 0x04, 0x60, 0x29,
    0x54, 0x5D, 0xD7, 0x27, 0x61, 0x63, 0xF6, 0xB3, 0x6E, 0x1C, 0x6A, 0x7C, 0x43, 0x28, 0x1E,
];

pub fn bch_code(info_bytes: &[u8]) -> u8 {
    assert_eq!(info_bytes.len(), 7);
    let info_bits = info_bytes
        .iter()
        .flat_map(|octet| (0usize..8).map(move |shift| octet << shift & 0x80));
    let ecc = info_bits.fold(0u8, |ecc, infobit| {
        let msb = ecc & 0x80;
        let maskbit = msb ^ infobit;
        let mask = maskbit | (maskbit >> 4) | (maskbit >> 6);
        (ecc << 1) ^ mask
    });
    !ecc & !0b1
}

pub fn encode(tc_tf: &mut [u8]) -> Vec<u8> {
    let tf_len = tc_tf.len();
    let randomized = tc_tf;
    randomize(randomized);
    let info_blocks = (tf_len + 1) / 7;
    let codewords_size = info_blocks * 8;
    let cltu_size = codewords_size + 2 + 8;
    let mut cltu = Vec::with_capacity(cltu_size);
    cltu.extend([0xEB, 0x90]); // START SEQUENCE
    for info_bytes in randomized.chunks(7) {
        if info_bytes.len() < 7 {
            let mut filled_info_bytes = [0x55; 7];
            filled_info_bytes[..info_bytes.len()].copy_from_slice(info_bytes);
            let bch = bch_code(&filled_info_bytes);
            cltu.extend_from_slice(&filled_info_bytes);
            cltu.push(bch);
        } else {
            let bch = bch_code(info_bytes);
            cltu.extend_from_slice(info_bytes);
            cltu.push(bch);
        }
    }
    cltu.extend([0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x79]); // TAIL SEQUENCE
    cltu
}

pub fn randomize(tc_tf: &mut [u8]) {
    for (byte, mask) in tc_tf.iter_mut().zip(RANDOMIZATION_TABLE.iter().cycle()) {
        *byte ^= mask;
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_bch() {
        let bch = bch_code(&[0xDCu8, 0x65, 0x9E, 0x4C, 0x68, 0x2B, 0x1C]);
        assert_eq!(bch, 0xCC);
    }

    #[test]
    fn test_randomize() {
        let mut bytes = vec![
            0x23, 0x5C, 0x00, 0x16, 0x00, 0xC2, 0x1A, 0x10, 0xC0, 0x00, 0x00, 0x08, 0x01, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x66,
        ];
        randomize(&mut bytes);
        assert_eq!(
            bytes,
            &[
                0xDC, 0x65, 0x9E, 0x4C, 0x68, 0x2B, 0x1C, 0xE5, 0xAC, 0x89, 0x2F, 0xA9, 0x30, 0x5C,
                0x08, 0xC0, 0x52, 0xA8, 0xBB, 0xAE, 0x4E, 0x3E, 0xA1
            ]
        );
    }

    #[test]
    fn test_cltu() {
        let cltu = encode(&mut [
            0x23, 0x5C, 0x00, 0x16, 0x00, 0xC2, 0x1A, 0x10, 0xC0, 0x00, 0x00, 0x08, 0x01, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x66,
        ]);
        assert_eq!(
            cltu,
            &[
                0xEB, 0x90, 0xDC, 0x65, 0x9E, 0x4C, 0x68, 0x2B, 0x1C, 0xCC, 0xE5, 0xAC, 0x89, 0x2F,
                0xA9, 0x30, 0x5C, 0x72, 0x08, 0xC0, 0x52, 0xA8, 0xBB, 0xAE, 0x4E, 0x2A, 0x3E, 0xA1,
                0x55, 0x55, 0x55, 0x55, 0x55, 0x6E, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x79
            ]
        );
    }
}
