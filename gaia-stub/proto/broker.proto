syntax = "proto3";

package broker;

import "tco_tmiv.proto";

service Broker {
  rpc PostCommand(PostCommandRequest) returns (PostCommandResponse);
  rpc OpenTelemetryStream(TelemetryStreamRequest) returns (stream TelemetryStreamResponse);
  rpc GetLastReceivedTelemetry(GetLastReceivedTelemetryRequest) returns (GetLastReceivedTelemetryResponse);

  rpc OpenCommandStream(stream CommandStreamRequest) returns (stream CommandStreamResponse);
  rpc PostTelemetry(PostTelemetryRequest) returns (PostTelemetryResponse);

  rpc PostSetVR(PostSetVRRequest) returns (PostSetVRResponse);
  rpc PostUnlock(PostUnlockRequest) returns (PostUnlockResponse);
  rpc PostADCommand(PostADCommandRequest) returns (PostADCommandResponse);
  rpc SubscribeFopFrameEvents(SubscribeFopFrameEventsRequest) returns (stream FopFrameEvent);
  rpc GetFopState(GetFopStateRequest) returns (GetFopStateResponse);
}

message PostCommandRequest {
  tco_tmiv.Tco tco = 3;
}

message PostCommandResponse {
  // TODO:
}

message CommandStreamRequest {
}

message CommandStreamResponse {
  string tco_json = 1;
  tco_tmiv.Tco tco = 2;
}

message PostTelemetryRequest {
  string tmiv_json = 1;
  tco_tmiv.Tmiv tmiv = 2;
}

message PostTelemetryResponse {
  // TODO:
}

message TelemetryStreamRequest {
}

message TelemetryStreamResponse {
  tco_tmiv.Tmiv tmiv = 3;
}

message GetLastReceivedTelemetryRequest {
  string telemetry_name = 1;
}

message GetLastReceivedTelemetryResponse {
  tco_tmiv.Tmiv tmiv = 1;
}

message PostSetVRRequest {
  uint32 vr = 1;
}

message PostSetVRResponse {
}

message PostUnlockRequest { }

message PostUnlockResponse { }

message PostADCommandRequest {
    tco_tmiv.Tco tco = 1;
}

message PostADCommandResponse {
    bool success = 1;
    uint64 frame_id = 2;
}

message SubscribeFopFrameEventsRequest {
}

message FopFrameEvent {
    uint64 frame_id = 1;
    enum EventType {
        TRANSMIT = 0;
        ACKNOWLEDGED = 1;
        RETRANSMIT = 2;
        CANCEL = 3;
    };
    EventType event_type = 2;
}

message GetFopStateRequest {}

message GetFopStateResponse {
  bool received_clcw = 1;
  bool lockout_flag = 2;
  bool wait_flag = 3;
  bool retransmit_flag = 4;
  uint32 next_expected_sequence_number = 5;

  bool has_next_sequence_number = 11;
  uint32 next_sequence_number = 12;
}
